# Azure Deployment Plan for GoogleSheetMCP Project

## Goal
Deploy the GoogleSheetMCP Node.js HTTP Streamable MCP server to Azure App Service (Web App) with CI/CD via GitHub Actions.

## Project Information
- App Name: GoogleSheetMCP
- Technology Stack: Node.js (ESM), Express 5, @modelcontextprotocol/sdk (MCP) v0.6.x
- Application Type: HTTP Streamable MCP server over Server-Sent Events (SSE) with Google Sheets CSV tools
- Dependencies: axios, csv-parse
- Hosting Recommendation: Azure App Service (Linux, Node runtime)
- Entrypoint: `npm start` -> `node index.js`
- Listening Port: `process.env.PORT` (required by Azure)

## Azure Resources Architecture
```mermaid
flowchart LR
  user[Copilot Studio / MCP Client] -->|SSE + JSON-RPC| app[Azure Web App: GoogleMCP]
  subgraph Azure
    app --> logs[Application Insights]
  end
```
- The MCP client establishes an SSE stream to the Web App and POSTs JSON-RPC messages.
- Application Insights collects logs and metrics from the Web App.

## Recommended Azure Resources
- Application GoogleSheetMCP
  - Hosting Service Type: Azure Web App (Linux)
  - SKU: Basic (B1) or Standard (S1) for always-on and better performance
  - Configuration:
    - language: nodejs
    - Environment Variables: [] (none required by default; optional APPINSIGHTS_INSTRUMENTATIONKEY if using classic instrumentation)
  - Dependencies Resource: None required for baseline (no DB). Optional Application Insights for observability.

Recommended Supporting Services
- Application Insights (logging/metrics)
- Log Analytics Workspace (optional)
- Key Vault (optional; if future secrets are needed)

## Execution Step
1. Provision Azure Infrastructure:
   1. Create (or use existing) Resource Group.
   2. Create Azure Web App (Linux) with Node runtime and enable Always On.
   3. Create Application Insights and link to the Web App.

2. Build and Deploy the Application:
   1. Use existing GitHub Actions workflow `.github/workflows/main_googlemcp.yml` to deploy on push to `main`.
   2. Ensure App name matches `GoogleMCP` and that OIDC secrets are configured in the repository (`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_SUBSCRIPTION_ID`).

3. Validation:
   1. After deployment, verify `/health` returns status ok.
   2. Confirm SSE endpoint `/mcp/sse` responds and stays connected.

4. Summary:
   1. Deployment files: GitHub Actions workflow; app source `index.js`; `package.json` with `start` script.
   2. Architecture: Web App + optional Application Insights.
